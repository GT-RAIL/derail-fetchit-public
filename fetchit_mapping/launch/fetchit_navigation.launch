<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <arg name="sim"                 default="false" />
    <arg name="dynamic_env"         default="true" />
    <arg name="collision_mapping"   default="true" />
    <arg name="2d_map"         default="2d_map.yaml" />
    <arg name="3d_map"         default="3d_map.ot" />
    <arg name="wp_map"         default="arena_waypoints.yaml" />
    <arg name="testing"         default="false" />

    <!-- inferred args -->
    <arg name="2d_map_path" default="$(find fetchit_mapping)/maps/$(arg 2d_map)" />
    <arg name="3d_map_path" default="$(find fetchit_mapping)/maps/$(arg 3d_map)" />
    <arg name="wp_map_path" default="$(find fetchit_mapping)/maps/$(arg wp_map)" />

    <!-- parameters for enabling testing -->
    <param name="test_nav" type="bool" value="$(arg testing)" />
    <param name="logfile_path" type="str" value="$(find fetchit_mapping)/log/" />

    <!-- start 2D dynamic obstacle fitlering -->
    <include file="$(find fetchit_mapping)/launch/filter_dynamic_obstacles.launch" if="$(arg dynamic_env)"/>

    <!-- Start 2D localization -->
    <include file="$(find fetchit_mapping)/launch/fetchit_localization_2d.launch" if="$(arg dynamic_env)">
        <arg name="map_file"                value="$(arg 2d_map_path)" />
        <arg name="localization_scan_topic" value="/base_scan" />
    </include>
    <include file="$(find fetchit_mapping)/launch/fetchit_localization_2d.launch" unless="$(arg dynamic_env)">
        <arg name="map_file" value="$(arg 2d_map_path)" />
    </include>

    <!-- Publish 3D octomap for collision -->
    <include file="$(find fetchit_mapping)/launch/fetchit_octomapping.launch" if="$(arg collision_mapping)">
        <arg name="node_args"   value="$(arg 3d_map_path)"/>
        <arg name="mapping"     value="false"/>
    </include>

    <!-- begin static waypoint broadcasting -->
    <node pkg="fetchit_mapping" type="waypoint_publisher_node" name="waypoint_publisher_node" >
        <param name="waypoint_map_filepath" value="$(arg wp_map_path)"/>
    </node>

    <!-- Launch point-to-point navigation -->
    <node pkg="fetchit_mapping" type="fetch_go_to_goal" name="navigation_node" output="screen" />

</launch>