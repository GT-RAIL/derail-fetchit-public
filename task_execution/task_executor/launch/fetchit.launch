<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="sim" default="false" />
  <arg name="debug" default="false" />

  <!-- Arg to start the datalogger -->
  <arg name="datalogger" default="false" />

  <!-- Args to start different capabilities -->
  <arg name="start_all" default="false" />
  <arg name="mapping" default="false" />
  <arg name="navigation" default="$(eval arg('start_all') or arg('mapping'))" />
  <arg name="perception" default="$(arg start_all)" />
  <arg name="manipulation" default="$(arg start_all)" />
  <arg name="sound" default="$(arg start_all)" />
  <arg name="task_executor" default="$(arg start_all)" />
  <arg name="task_monitor" default="$(arg task_executor)" />

  <!-- Simulation helpers -->
  <arg name="sim_helpers" default="$(eval arg('sim') and arg('task_executor'))" />

  <!-- Navigation configuration args -->
  <arg name="2d_map_path" default="$(find task_executor)/maps/2d_map" />
  <arg name="3d_map_path" default="$(find task_executor)/maps/3d_map.bt" />
  <arg name="wp_map_path" default="$(find task_executor)/maps/arena_waypoints.yaml" />
  <arg name="nav_dynamic_env" default="false" />

  <!-- Perception configuration args -->
  <arg name="cloud_topic" value="/head_camera/depth_registered/points" />
  <arg name="grasp_classifier_file" default="random_forest.pkl" />
  <arg name="grasp_cluster_size" default="3" />
  <arg name="grasp_num_samples" default="4000" />
  <arg name="segmentation_config" default="$(find task_executor)/config/zones.yaml" />
  <arg name="recognition_model_file" default="$(find rail_object_recognition)/model/best_classifier.pkl" />
  <arg name="schunk_template_pose_offset" default="0.144 0.118 0.148 0 0 -0.785"/>

  <!-- Task configuration args -->
  <arg name="task_config" default="$(find task_executor)/config/tasks.yaml" />
  <arg name="data_config" value="$(find task_executor)/config/data.yaml" />

  <!-- Gobal params for octomapping with moveit -->
  <param name="octomap_frame" type="string" value="map" />
  <param name="octomap_resolution" type="double" value="0.025" />
  <param name="octomap_reload_path" type="string" value="$(arg 3d_map_path)" />


  <!-- The simulated helper nodes -->
  <group if="$(arg sim_helpers)">
    <!-- Launch a simulated SCHUNK machine if we need to -->
    <node name="schunk_machine_server" pkg="task_executor" type="schunk_machine_server.py" />
    <node name="sick_camera_server" pkg="task_executor" type="sick_camera_server.py" />

    <!-- We only want the stub robot driver if we're in simulation -->
    <node name="robot_driver" pkg="task_executor" type="simulated_robot_driver.py" if="$(arg sim)" />
  </group>

  <!-- Navigation -->
  <group if="$(arg navigation)">
    <include file="$(find fetchit_mapping)/launch/fetchit_mapping.launch" if="$(arg mapping)">
      <arg name="sim" value="$(arg sim)" />
      <arg name="2d_map_path" value="$(arg 2d_map_path)" />
      <arg name="3d_map_path" value="$(arg 3d_map_path)" />
      <arg name="dynamic_env" value="$(arg nav_dynamic_env)" />
    </include>

    <include file="$(find fetchit_mapping)/launch/fetchit_navigation.launch" unless="$(arg mapping)">
      <arg name="sim" value="$(arg sim)" />
      <arg name="2d_map_path" value="$(arg 2d_map_path).yaml" />
      <arg name="3d_map_path" value="$(arg 3d_map_path)" />
      <arg name="wp_map_path" value="$(arg wp_map_path)" />
      <arg name="testing" value="$(arg debug)" />
      <arg name="dynamic_env" value="$(arg nav_dynamic_env)" />
    </include>
  </group>

  <!-- Perception -->
  <group if="$(arg perception)">
    <!-- RAIL Segmentation -->
    <node name="rail_segmentation" pkg="rail_segmentation" type="rail_segmentation" output="screen">
      <param name="zones_config" value="$(arg segmentation_config)" />
      <param name="point_cloud_topic" value="$(arg cloud_topic)" />
      <param name="max_cluster_size" value="30000" />
      <param name="min_cluster_size" value="75" />
      <param name="crop_first" value="true" />
      <param name="label_markers" value="true" />
    </node>

    <!-- RAIL Segmentation post processing -->
    <node pkg="rail_segmentation_tools" type="merger" name="merger" />

    <!-- Object Recognition -->
    <include file="$(find rail_object_recognition)/launch/recognition.launch">
      <arg name="model_filepath" value="$(arg recognition_model_file)" />
    </include>

    <!-- Grasp Suggestion -->
    <include file="$(find fetch_grasp_suggestion)/launch/grasp_suggestion.launch">
      <arg name="cloud_topic" value="$(arg cloud_topic)" />
      <arg name="classifier_file" value="$(arg grasp_classifier_file)" />
      <arg name="cluster_size" value="$(arg grasp_cluster_size)" />
      <arg name="num_samples" value="$(arg grasp_num_samples)" />
    </include>

    <!-- Fetchit Bin Detection -->
    <include file="$(find fetchit_bin_detector)/launch/launch_detector.launch">
      <arg name="launch_segmentation" value="false" />
      <arg name="pcl_topic" value="$(arg cloud_topic)" />
      <arg name="seg_node_name" value="rail_segmentation" />
      <!-- viz publishes a static transform of the different bins. We already
      have a "best" bin transform publisher -->
      <arg name="viz_detections" value="$(arg debug)" />
    </include>
    <include file="$(find fetchit_icp)/launch/detect_kit_demo.launch">
      <!-- viz publishes a static transform of the chuck approach -->
      <arg name="visualize_output"        value="false" />
      <arg name="debug"                   value="$(arg debug)" />
    </include>

    <!-- Fetchit Schunk Detection -->
    <include file="$(find fetchit_icp)/launch/detect_schunk_demo.launch">
      <arg name="cloud_topic"             value="$(arg cloud_topic)"/>
      <arg name="initial_estimate"        value="1.357 -0.05 0.84 1.57 0 0"/>
      <arg name="template_offset"         value="$(arg schunk_template_pose_offset)"/>
      <!-- viz publishes a static transform of the chuck approach -->
      <arg name="visualize_output"        value="true" />
      <arg name="debug"                   value="$(arg debug)" />
      <arg name="latch_initial_estimate"  value="true"/>
    </include>

  </group>

  <!-- Manipulation -->
  <group if="$(arg manipulation)">
    <!-- common to all (sampling-based) manipulation -->
    <include file="$(find fetch_moveit_config)/launch/move_group.launch">
      <arg name="info" value="true"/>
      <arg name="allow_active_sensing" value="true" />
    </include>
    <node name="collision_scene_manager" pkg="manipulation_actions" type="collision_scene_manager" output="screen" />
    <node name="linear_controller" pkg="manipulation_actions" type="linear_controller" output="screen" />
    <node name="schunk_linear_controller" pkg="manipulation_actions" type="linear_controller" output="screen">
      <param name="max_linear_vel" value="0.03" />
      <param name="kp" value="1.0" />
      <param name="ip" value="0.0" />
    </node>

    <!-- Set a static transform for the SCHUNK machine in simulation to make MoveIt! happy -->
    <node name="world_to_odom_publisher" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 odom world 10" if="$(arg sim)"/>

    <!-- task-specific manipulation actions -->
    <node name="grasp_executor" pkg="fetch_grasp_suggestion" type="executor" output="screen" />
    <!--<node name="cluttered_grasper" pkg="manipulation_actions" type="cluttered_grasper" output="screen" />-->
    <node name="in_hand_localizer" pkg="manipulation_actions" type="in_hand_localizer" output="screen">
      <param name="add_object" value="false" />
      <param name="debug" value="$(arg debug)" />
    </node>
    <node name="kit_manipulator" pkg="manipulation_actions" type="kit_manipulator" output="screen">
      <param name="add_object" value="false" />
      <param name="debug" value="$(arg debug)" />
    </node>

    <node name="schunk_gear_grasper" pkg="manipulation_actions" type="schunk_gear_grasper" output="screen">
      <param name="template_offset_string"   value="$(arg schunk_template_pose_offset)"/>
    </node>

    <node name="playback_trajectory" pkg="data_recorder" type="playback_executor.py" output="screen" />

    <!-- Schunk Manipulation capabiltites -->
    <node name="approach_schunk_node" pkg="manipulation_actions" type="approach_schunk_node" output="screen">
      <param name="object_frame"  value="object_frame"/>
      <param name="eef_frame"     value="wrist_roll_link"/>
      <param name="add_object"    value="false"/>
      <param name="moveit_gain"   value="0.3"/>
      <param name="template_offset_string"   value="$(arg schunk_template_pose_offset)"/>
    </node>

    <node name="schunk_insertion" pkg="manipulation_actions" type="schunk_insert" output="screen">
    <!-- need to enter all parameters... -->
      <param name="command_rate" value="50"/>
      <param name="max_force" value="22"/>
      <param name="insert_duration" value="5"/>
      <param name="insert_tol" value="0.145"/>
      <param name="max_reset_vel" value="0.03"/>
      <param name="num_trial_max" value="10"/>
      <param name="reposition_duration" value="0.5"/>
      <param name="drift_thresh" value="0.025"/>
      <!--<param name="reset_duration" value="4"/>-->
    </node>
  </group>

  <!-- Sound Play -->
  <group if="$(arg sound)">
    <node name="sound_server" pkg="sound_interface" type="server_node.py" />
  </group>

  <!-- Data Logger -->
  <node name="datalogger" pkg="task_monitor" type="datalogger_node.py" output="screen" if="$(arg datalogger)" />

  <!-- Task Monitoring and Management -->
  <include file="$(find task_monitor)/launch/monitor.launch" if="$(arg task_monitor)">
    <arg name="sim" value="$(arg sim)" />
  </include>

  <!-- Task Execution -->
  <group if="$(arg task_executor)">
    <include file="$(find task_executor)/launch/task_executor.launch">
      <arg name="sim" value="$(arg sim)" />
      <arg name="task_config" value="$(arg task_config)" />
      <arg name="data_config" value="$(arg data_config)" />
    </include>
  </group>
</launch>
