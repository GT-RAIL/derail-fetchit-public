<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="sim" default="false" />
  <arg name="debug" default="false" />

  <!-- Arg to start the datalogger -->
  <arg name="datalogger" default="false" />

  <!-- Args to start different capabilities -->
  <arg name="start_all" default="false" />
  <arg name="mapping" default="false" />
  <arg name="navigation" default="$(eval arg('start_all') or arg('mapping'))" />
  <arg name="perception" default="$(arg start_all)" />
  <arg name="manipulation" default="$(arg start_all)" />
  <arg name="sound" default="$(arg start_all)" />
  <arg name="task_executor" default="$(arg start_all)" />
  <arg name="task_monitor" default="$(arg task_executor)" />

  <!-- Simulation helpers -->
  <arg name="launch_schunk" default="$(eval arg('sim') and arg('task_executor'))" />

  <!-- Navigation configuration args -->
  <arg name="2d_map_path" default="$(find task_executor)/maps/2d_map" />
  <arg name="3d_map_path" default="$(find task_executor)/maps/3d_map.ot" />
  <arg name="wp_map_path" default="$(find task_executor)/maps/arena_waypoints.yaml" />

  <!-- Perception configuration args -->
  <arg name="cloud_topic" value="/head_camera/depth_registered/points" />
  <arg name="grasp_classifier_file" default="random_forest.pkl" />
  <arg name="segmentation_config" default="$(find task_executor)/config/zones.yaml" />
  <arg name="recognition_data_file" default="$(find rail_object_recognition)/data/dataset.csv" />
  <arg name="recognition_test_file" default="$(find rail_object_recognition)/data/objects_fetchit_1.csv" />

  <!-- Task configuration args -->
  <arg name="task_config" default="$(find task_executor)/config/tasks.yaml" />
  <arg name="recovery_task_config" default="$(find task_executor)/config/recovery_tasks.yaml" />
  <arg name="data_config" value="$(find task_executor)/config/data.yaml" />


  <!-- Launch a simulated SCHUNK machine if we need to -->
  <node name="schunk_machine_server" pkg="task_executor" type="schunk_machine_server.py" if="$(arg launch_schunk)" />

  <!-- Navigation -->
  <group if="$(arg navigation)">
    <include file="$(find fetchit_mapping)/launch/fetchit_mapping.launch" if="$(arg mapping)">
      <arg name="sim" value="$(arg sim)" />
      <arg name="2d_map_path" value="$(arg 2d_map_path)" />
      <arg name="3d_map_path" value="$(arg 3d_map_path)" />
    </include>

    <include file="$(find fetchit_mapping)/launch/fetchit_navigation.launch" unless="$(arg mapping)">
      <arg name="sim" value="$(arg sim)" />
      <arg name="2d_map_path" value="$(arg 2d_map_path).yaml" />
      <arg name="3d_map_path" value="$(arg 3d_map_path)" />
      <arg name="wp_map_path" value="$(arg wp_map_path)" />
      <arg name="testing" value="$(arg debug)" />
    </include>
  </group>

  <!-- Perception -->
  <group if="$(arg perception)">
    <!-- RAIL Segmentation -->
    <node name="rail_segmentation" pkg="rail_segmentation" type="rail_segmentation" output="screen">
      <param name="zones_config" value="$(arg segmentation_config)" />
      <param name="point_cloud_topic" value="$(arg cloud_topic)" />
      <param name="max_cluster_size" value="30000" />
      <param name="min_cluster_size" value="75" />
      <param name="crop_first" value="true" />
    </node>

    <!-- Object Recognition -->
    <include file="$(find rail_object_recognition)/launch/recognition.launch">
      <arg name="data_filepath" value="$(arg recognition_data_file)" />
      <arg name="test_filepath" value="$(arg recognition_test_file)" />
    </include>

    <!-- Grasp Suggestion -->
    <include file="$(find fetch_grasp_suggestion)/launch/grasp_suggestion.launch">
      <arg name="cloud_topic" value="$(arg cloud_topic)" />
      <arg name="classifier_file" value="$(arg grasp_classifier_file)" />
    </include>

    <!-- Fetchit Bin Detection -->
    <include file="$(find fetchit_bin_detector)/launch/launch_detector.launch">
      <arg name="launch_segmentation" value="false" />
      <arg name="pcl_topic" value="$(arg cloud_topic)" />
      <arg name="seg_service" value="/rail_segmentation/segment_objects" />
      <!-- viz publishes a static transform of the different bins. We already
      have a "best" bin transform publisher -->
      <arg name="viz_detections" value="$(arg debug)" />
    </include>
  </group>

  <!-- Manipulation -->
  <group if="$(arg manipulation)">
    <!-- common to all (sampling-based) manipulation -->
    <include file="$(find fetch_moveit_config)/launch/move_group.launch">
      <arg name="info" value="true"/>
      <arg name="allow_active_sensing" value="true" />
    </include>
    <node name="collision_scene_manager" pkg="manipulation_actions" type="collision_scene_manager" output="screen" />
    <!-- Set a static transform for the SCHUNK machine in simulation to make MoveIt! happy -->
    <node name="world_to_odom_publisher" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 odom world 10" if="$(arg sim)"/>

    <!-- task-specific manipulation actions -->
    <node name="grasp_executor" pkg="fetch_grasp_suggestion" type="executor" output="screen" />
    <node name="cluttered_grasper" pkg="manipulation_actions" type="cluttered_grasper" output="screen" />
    <node name="in_hand_localizer" pkg="manipulation_actions" type="in_hand_localizer" output="screen">
      <param name="add_object" value="true" />
    </node>
    <node name="placer" pkg="manipulation_actions" type="placer" output="screen">
      <param name="add_object" value="true" />
    </node>
  </group>

  <!-- Sound Play -->
  <group if="$(arg sound)">
    <node name="sound_server" pkg="sound_interface" type="server_node.py" />
  </group>

  <!-- Data Logger -->
  <node name="datalogger" pkg="task_monitor" type="datalogger_node.py" output="screen" if="$(arg datalogger)" />

  <!-- Task Monitoring and Management -->
  <include file="$(find task_monitor)/launch/monitor.launch" if="$(arg task_monitor)">
    <arg name="sim" value="$(arg sim)" />
  </include>

  <!-- Task Execution -->
  <group if="$(arg task_executor)">
    <include file="$(find task_executor)/launch/task_executor.launch">
      <arg name="sim" value="$(arg sim)" />
      <arg name="task_config" value="$(arg task_config)" />
      <arg name="recovery_task_config" value="$(arg recovery_task_config)" />
      <arg name="data_config" value="$(arg data_config)" />
    </include>
  </group>
</launch>
