<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="sim" default="false" />
  <arg name="debug" default="false" />

  <!-- Arg to start the datalogger -->
  <arg name="datalogger" default="false" />

  <!-- Args to start different capabilities -->
  <arg name="start_all" default="false" />
  <arg name="navigation" default="$(arg start_all)" />
  <arg name="perception" default="$(arg start_all)" />
  <arg name="arm" default="$(arg start_all)" />
  <arg name="people" default="$(arg start_all)" />
  <arg name="sound" default="$(arg start_all)" />
  <arg name="speech" default="$(arg start_all)" />
  <arg name="task_executor" default="$(arg start_all)" />
  <arg name="arbitrator" default="$(arg task_executor)" />
  <arg name="local_strategy" default="$(arg task_executor)" />
  <arg name="remote_strategy" default="$(arg task_executor)" />

  <!-- Common args -->
  <arg name="cloud_topic" value="/head_camera/depth_registered/points" />
  <arg name="grasp_classifier_file" value="random_forest.pkl" />
  <arg name="segmentation_config" value="$(find task_executor)/config/zones.yaml" />
  <arg name="task_config" value="$(find task_executor)/config/tasks.yaml" />

  <!-- Simulation vs. non simulation args -->
  <arg name="data_config" value="$(find task_executor)/config/simulation.yaml" if="$(arg sim)" />
  <arg name="map_file" value="$(find fetch_gazebo_demo)/maps/test_zone.yaml" if="$(arg sim)" />
  <arg name="data_config" value="$(find task_executor)/config/robot.yaml" unless="$(arg sim)" />
  <arg name="map_file" value="$(find fetch_demos)/maps/map.yaml" unless="$(arg sim)" />

  <!-- Other args -->
  <arg name="speech_gui" default="$(arg sim)" />

  <!-- Navigation -->
  <group if="$(arg navigation)">
    <include file="$(find fetch_navigation)/launch/fetch_nav.launch">
      <arg name="map_file" value="$(arg map_file)" />
    </include>
  </group>

  <!-- Perception -->
  <group if="$(arg perception)">
    <!-- RAIL Segmentation -->
    <node pkg="rail_segmentation" type="rail_segmentation" name="rail_segmentation" output="screen">
      <param name="zones_config" value="$(arg segmentation_config)" />
      <param name="point_cloud_topic" value="$(arg cloud_topic)" />
      <param name="max_cluster_size" value="30000" />
      <param name="min_cluster_size" value="75" />
    </node>

    <!-- Grasp Suggestion -->
    <include file="$(find fetch_grasp_suggestion)/launch/grasp_suggestion.launch">
      <arg name="cloud_topic" value="$(arg cloud_topic)" />
      <arg name="classifier_file" value="$(arg grasp_classifier_file)" />
    </include>
  </group>

  <!-- Arm -->
  <group if="$(arg arm)">
    <node pkg="fetch_grasp_suggestion" type="executor" name="grasp_executor" output="screen" />

    <include file="$(find fetch_moveit_config)/launch/move_group.launch">
      <arg name="info" value="true"/>
      <arg name="allow_active_sensing" value="true" />
    </include>
  </group>

  <!-- People Detection -->
  <group if="$(arg people)">
    <include file="$(find rail_people_detector)/launch/closest_person_detection.launch" unless="$(arg sim)" >
      <arg name="start_all" value="true" />
      <arg name="debug" value="$(arg debug)" />
    </include>

    <node name="rail_people_detector" pkg="simulation_helpers" type="closest_person_generator.py" output="screen" if="$(arg sim)">
      <param name="desired_pose_frame" value="base_link" />
      <param name="position_match_threshold" value="1.0" />
      <param name="publish_rate" value="15.0" />
      <param name="debug" value="$(arg debug)" />
    </node>
  </group>

  <!-- Sound Play -->
  <group if="$(arg sound)">
    <node name="sound_server" pkg="sound_interface" type="server_node.py" />
  </group>

  <!-- Speech recognition -->
  <group if="$(arg speech)">
    <include file="$(find hlpr_speech_recognition)/launch/speech_rec.launch">
      <arg name="speech_gui" value="$(arg speech_gui)" />
    </include>
  </group>

  <!-- Data Logger -->
  <node name="datalogger" pkg="task_monitor" type="datalogger_node.py" output="screen" if="$(arg datalogger)" />

  <!-- Local recovery strategy -->
  <include file="$(find local_strategy)/launch/recovery_strategy.launch" if="$(arg local_strategy)">
    <arg name="sim" value="$(arg sim)" />
  </include>

  <!-- Remote recovery strategy -->
  <include file="$(find remote_strategy)/launch/recovery_strategy.launch" if="$(arg remote_strategy)">
    <arg name="sim" value="$(arg sim)" />
  </include>

  <!-- Assistance arbitration -->
  <include file="$(find task_monitor)/launch/arbitrator.launch" if="$(arg arbitrator)">
    <arg name="sim" value="$(arg sim)" />
  </include>

  <!-- Task Execution -->
  <group if="$(arg task_executor)">
    <include file="$(find task_executor)/launch/task_executor.launch">
      <arg name="sim" value="$(arg sim)" />
      <arg name="task_config" value="$(arg task_config)" />
      <arg name="data_config" value="$(arg data_config)" />
    </include>

    <!-- Simulation helpers if this is in simulation -->
    <group if="$(arg sim)">
      <!-- Joystick Teleop -->
      <node name="joy_node" pkg="joy" type="joy_node" />
      <node name="teleop" pkg="fetch_teleop" type="joystick_teleop" />

      <!-- Robot Driver -->
      <node name="robot_driver" pkg="simulation_helpers" type="simulated_robot_driver.py" />

      <!-- Diagnostics -->
      <node name="diagnostic_aggregator" pkg="diagnostic_aggregator" type="aggregator_node" args="CPP">
        <rosparam command="load" file="$(find simulation_helpers)/config/analyzers.yaml" />
      </node>

    </group>

  </group>
</launch>
